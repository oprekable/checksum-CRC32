---
# Github Actions build for checksum-CRC32
# -*- compile-command: "yamllint -f parsable build.yml" -*-

name: build

# Trigger the workflow on push or pull request
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:

jobs:
  build:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        job_name: ['linux', 'mac', 'windows_amd64', 'windows_386', 'other_os', 'modules_race', 'go1.11', 'go1.12', 'go1.13']

        include:
          - job_name: linux
            os: ubuntu-latest
            go: '1.14.x'
            modules: 'off'
            gotags: cmount
            build_flags: '-include "^linux/"'
            check: true
            quicktest: true
            deploy: true

          - job_name: mac
            os: macOS-latest
            go: '1.14.x'
            modules: 'off'
            gotags: ''  # cmount doesn't work on osx travis for some reason
            build_flags: '-include "^darwin/amd64" -cgo'
            quicktest: true
            racequicktest: true
            deploy: true

          - job_name: windows_amd64
            os: windows-latest
            go: '1.14.x'
            modules: 'off'
            gotags: cmount
            build_flags: '-include "^windows/amd64" -cgo'
            quicktest: true
            racequicktest: true
            deploy: true

          - job_name: windows_386
            os: windows-latest
            go: '1.14.x'
            modules: 'off'
            gotags: cmount
            goarch: '386'
            cgo: '1'
            build_flags: '-include "^windows/386" -cgo'
            quicktest: true
            deploy: true

          - job_name: other_os
            os: ubuntu-latest
            go: '1.14.x'
            modules: 'off'
            build_flags: '-exclude "^(windows/|darwin/amd64|linux/)"'
            compile_all: true
            deploy: true

          - job_name: modules_race
            os: ubuntu-latest
            go: '1.14.x'
            modules: 'on'
            quicktest: true
            racequicktest: true

          - job_name: go1.11
            os: ubuntu-latest
            go: '1.11.x'
            modules: 'off'
            quicktest: true

          - job_name: go1.12
            os: ubuntu-latest
            go: '1.12.x'
            modules: 'off'
            quicktest: true

          - job_name: go1.13
            os: ubuntu-latest
            go: '1.13.x'
            modules: 'off'
            quicktest: true

    name: ${{ matrix.job_name }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          # Checkout into a fixed path to avoid import path problems on go < 1.11
          path: ./src/github.com/oprekable/checksum-CRC32

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go }}

      - name: Set environment variables
        shell: bash
        run: |
          echo '::set-env name=GOPATH::${{ runner.workspace }}'
          echo '::add-path::${{ runner.workspace }}/bin'
          echo '::set-env name=GO111MODULE::${{ matrix.modules }}'
          echo '::set-env name=GOTAGS::${{ matrix.gotags }}'
          echo '::set-env name=BUILD_FLAGS::${{ matrix.build_flags }}'
          if [[ "${{ matrix.goarch }}" != "" ]]; then echo '::set-env name=GOARCH::${{ matrix.goarch }}' ; fi
          if [[ "${{ matrix.cgo }}" != "" ]]; then echo '::set-env name=CGO_ENABLED::${{ matrix.cgo }}' ; fi

      - name: Install Libraries on Linux
        shell: bash
        run: |
          sudo apt-get install rpm pkg-config
        if: matrix.os == 'ubuntu-latest'

      - name: Install Libraries on macOS
        shell: bash
        run: |
          brew update
          brew upgrade
        if: matrix.os == 'macOS-latest'

      - name: Install Libraries on Windows
        shell: powershell
        run: |
          $ProgressPreference = 'SilentlyContinue'
          choco install -y zip
          if ($env:GOARCH -eq "386") {
            choco install -y mingw --forcex86 --force
            Write-Host "::add-path::C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw32\\bin"
          }
          # Copy mingw32-make.exe to make.exe so the same command line
          # can be used on Windows as on macOS and Linux
          $path = (get-command mingw32-make.exe).Path
          Copy-Item -Path $path -Destination (Join-Path (Split-Path -Path $path) 'make.exe')
        if: matrix.os == 'windows-latest'

      - name: Print Go version and environment
        shell: bash
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\checksum-CRC32 environment:\n\n"
          make vars
          printf "\n\nSystem environment:\n\n"
          env

      - name: Run tests
        shell: bash
        run: |
          make
          make quicktest
        if: matrix.quicktest

      - name: Race test
        shell: bash
        run: |
          make racequicktest
        if: matrix.racequicktest

      - name: Code quality test
        shell: bash
        run: |
          make build_dep
          make check
        if: matrix.check

      - name: Compile all architectures test
        shell: bash
        run: |
          make
          make compile_all
        if: matrix.compile_all

      - name: Deploy built binaries
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then make release_dep ; fi
        env:
        # working-directory: '$(modulePath)'
        # Deploy binaries if enabled in config && not a PR && not a fork
        if: matrix.deploy && github.head_ref == '' && github.repository == 'oprekable/checksum-CRC32'

  xgo:
    timeout-minutes: 60
    name: "xgo cross compile"
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v1
        with:
          # Checkout into a fixed path to avoid import path problems on go < 1.11
          path: ./src/github.com/oprekable/checksum-CRC32

      - name: Set environment variables
        shell: bash
        run: |
          echo '::set-env name=GOPATH::${{ runner.workspace }}'
          echo '::add-path::${{ runner.workspace }}/bin'

      - name: Cross-compile checksum-CRC32
        run: |
          docker pull karalabe/xgo-latest
          go get -v github.com/karalabe/xgo
          xgo \
              -image=karalabe/xgo-latest \
              -targets=darwin/386,darwin/amd64,linux/386,linux/amd64,windows/386,windows/amd64 \
              -tags cmount \
              -dest build \
              .
          xgo \
              -image=karalabe/xgo-latest \
              -targets=android/*,ios/* \
              -dest build \
              .

      - name: Build checksum-CRC32
        run: |
          docker pull golang
          docker run --rm -v "$PWD":/usr/src/checksum-CRC32 -w /usr/src/checksum-CRC32 golang go build -mod=vendor -v